// project build.gradle.kts
plugins {
	id("com.google.devtools.ksp") version "1.9.10-1.0.13" apply false
}

// app build.gradle.kts
plugins {
	id("com.google.devtools.ksp")
}

// dependencies
def room_version = "2.6.0"
implementation("androidx.room:room-runtime:${rootProject.extra["room_version"]}")
ksp("androidx.room:room-compiler:${rootProject.extra["room_version"]}")
implementation("androidx.room:room-ktx:${rootProject.extra["room_version"]}")

// Entity
@Entity(
    tableName = "neuron",
    foreignKeys = [
        ForeignKey(
            entity = Neuron::class,
            parentColumns = ["id"],
            childColumns = ["parent_id"],
            onDelete = ForeignKey.CASCADE
        )
    ],
    indices = [Index("name")]
)
data class Neuron(
    @PrimaryKey
    val id: Int,
    val name: String,
    val value: String,
    @ColumnInfo(name = "parent_id")
    val parentId: Int,
)

// dao
@Dao
interface NeuronDao {
    @Query("SELECT * FROM neuron")
    fun getAll(): Flow<List<Neuron>>
    
    @Query("SELECT * FROM neuron WHERE id = :id")
    fun getById(id: Int): Flow<Neuron>
    
    @Query("SELECT * FROM neuron WHERE name LIKE :name")
    fun getByName(name: String): Flow<List<Neuron>>
    
    @Insert(onConflict = OnConflictStrategy.IGNORE)
    suspend fun insert(neuron: Neuron)
    
    @Update
    suspend fun update(neuron: Neuron)
    
    @Delete
    suspend fun delete(neuron: Neuron)
}
